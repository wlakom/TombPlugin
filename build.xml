<?xml version="1.0" encoding="UTF-8"?>
<project name="TombPlugin" default="dist" basedir=".">

    <property name="commit.message" value="Commit message" />
    <property name="plugin.main.version" value="14260" />


	<!-- put here real JOSM project location -->
    <property name="plugin.dist.dir" value="d:\Archiwum\Mapowanie\"/>
  <!--  <property name="plugin.dist.dir" value="../JOSM/dist"/> -->
    <property name="josm" location="${plugin.dist.dir}/josm-custom.jar"/>
	
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.lib.dir" value="lib"/>
    <property name="plugin.src.dir" value="src"/>
    <property name="ant.build.javac.target" value="1.8"/>

    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>

    <!--
**********************************************************
** init - initializes the build
**********************************************************
-->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    	<delete includeEmptyDirs="true">
	  	    <fileset dir="${plugin.build.dir}"/>
    	</delete>
        <mkdir dir="${plugin.build.dir}"/>
    </target>

    <!--
**********************************************************
** compile - complies the source tree
**********************************************************
-->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ... "/>
        <javac source="1.8" target="1.8"  srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}" includeantruntime="false">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
         <classpath>
			<pathelement location="${josm}"/>
			<pathelement location="${plugin.dist.dir}/apache-commons.jar"/>
  			<pathelement location="${plugin.dist.dir}/apache-http.jar"/>
         	
            <fileset dir="${plugin.lib.dir}">
                <include name="**/*.jar"/>
                <exclude name="**/*-sources.jar"/>
                <exclude name="**/*-javadoc.jar"/>
            </fileset>
		</classpath>
        </javac>
    </target>

    <!--
**********************************************************
** dist - creates the plugin jar
**********************************************************
-->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
       <!--
<copy todir="${plugin.build.dir}/resources">
<fileset dir="resources"/>
</copy>
-->
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README" />
                <include name="LICENSE" />
            </fileset>
        </copy>

     <echo>{version.entry.commit.date}: ${version.entry.commit.date}</echo>
     <echo>{version.entry.commit.revision}: ${version.entry.commit.revision}</echo>
     <echo>{build.number}: ${build.number}</echo>
    
     <echo>{plugin.jar}: ${plugin.jar}</echo>
     <echo>{plugin.build.dir}: ${plugin.build.dir}</echo>
        
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Kendzi"/>
                <attribute name="Plugin-Class" value="kendzi.josm.plugin.tomb.TombPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Simple plugin for taging tombs"/>
                <attribute name="Plugin-Icon" value="images/tomb_icon.png"/>
                <attribute name="Plugin-Link" value="https://wiki.openstreetmap.org/index.php/JOSM/Plugins/Tomb_Plugin"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
                <attribute name="Plugin-Requires" value="apache-commons;apache-http"/>
            </manifest>
            <restrict>
                <archives>
                    <zips>
                        <fileset dir="${plugin.lib.dir}" includes="*.jar" excludes="*-sources.jar, *-javadoc.jar" erroronmissingdir="no"/>
                    </zips>
                </archives>
            </restrict>
        </jar>
     <copy tofile="${plugin.dist.dir}/${ant.project.name}_v${version.entry.commit.revision}.jar" file="${plugin.jar}" />
    </target>

    <!--
**********************************************************
** revision - extracts the current revision number for the
** file build.number and stores it in the XML property
** version.*
**********************************************************
-->
<target name="revision">
<!--
<exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
<env key="LANG" value="C"/>
<arg value="info"/>
<arg value="- -xml"/>
<arg value="."/>
</exec>
<xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
<delete file="REVISION"/>
-->

<buildnumber/>

<tstamp>
<format property="version.entry.commit.date" pattern="yyyy-MM-dd hh:mm aa"/>
</tstamp>
<property name="version.entry.commit.revision" value="${build.number}" />

<echo>{version.entry.commit.date}: ${version.entry.commit.date}</echo>
<echo>{version.entry.commit.revision}: ${version.entry.commit.revision}</echo>
<echo>{build.number}: ${build.number}</echo>


</target>

    <!--
**********************************************************
** clean - clean up the build environment
**********************************************************
-->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>

    <!--
**********************************************************
** install - install the plugin in your local JOSM installation
**********************************************************
-->
    <target name="install" depends="dist">
        <property environment="env"/>
    
     <!--
<condition property="josm.plugins.dir" value="c:\Users\Władysław Komorek\AppData\Roaming\JOSM\plugins\" else="${user.home}/.josm/plugins">
<condition property="josm.plugins.dir" value="${env.APPDATA}\Roaming\JOSM\plugins\" else="${user.home}/.josm/plugins">
-->
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>


    <!--
************************** Publishing the plugin ***********************************
-->
    <!--
** extracts the JOSM release for the JOSM version in ../core and saves it in the
** property ${coreversion.info.entry.revision}
**
-->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml" />
    </target>

    <!--
** commits the source tree for this plugin
-->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>

    <!--
** updates (svn up) the source tree for this plugin
-->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>

    <!--
** commits the plugin.jar
-->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>

    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C" />
            <arg value="--version" />
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code" />
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}" />
            </condition>
        </fail>
    </target>

    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
